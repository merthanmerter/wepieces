/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MeImport } from './routes/me'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as HubRootImport } from './routes/hub._root'
import { Route as HubRootIndexImport } from './routes/hub._root.index'
import { Route as HubRootUsersImport } from './routes/hub._root.users'
import { Route as HubRootUsersPidImport } from './routes/hub._root.users_.$pid'

// Create Virtual Routes

const HubImport = createFileRoute('/hub')()

// Create/Update Routes

const HubRoute = HubImport.update({
  path: '/hub',
  getParentRoute: () => rootRoute,
} as any)

const MeRoute = MeImport.update({
  path: '/me',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const HubRootRoute = HubRootImport.update({
  id: '/_root',
  getParentRoute: () => HubRoute,
} as any)

const HubRootIndexRoute = HubRootIndexImport.update({
  path: '/',
  getParentRoute: () => HubRootRoute,
} as any)

const HubRootUsersRoute = HubRootUsersImport.update({
  path: '/users',
  getParentRoute: () => HubRootRoute,
} as any)

const HubRootUsersPidRoute = HubRootUsersPidImport.update({
  path: '/users/$pid',
  getParentRoute: () => HubRootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/me': {
      id: '/me'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof MeImport
      parentRoute: typeof rootRoute
    }
    '/hub': {
      id: '/hub'
      path: '/hub'
      fullPath: '/hub'
      preLoaderRoute: typeof HubImport
      parentRoute: typeof rootRoute
    }
    '/hub/_root': {
      id: '/hub/_root'
      path: '/hub'
      fullPath: '/hub'
      preLoaderRoute: typeof HubRootImport
      parentRoute: typeof HubRoute
    }
    '/hub/_root/users': {
      id: '/hub/_root/users'
      path: '/users'
      fullPath: '/hub/users'
      preLoaderRoute: typeof HubRootUsersImport
      parentRoute: typeof HubRootImport
    }
    '/hub/_root/': {
      id: '/hub/_root/'
      path: '/'
      fullPath: '/hub/'
      preLoaderRoute: typeof HubRootIndexImport
      parentRoute: typeof HubRootImport
    }
    '/hub/_root/users/$pid': {
      id: '/hub/_root/users/$pid'
      path: '/users/$pid'
      fullPath: '/hub/users/$pid'
      preLoaderRoute: typeof HubRootUsersPidImport
      parentRoute: typeof HubRootImport
    }
  }
}

// Create and export the route tree

interface HubRootRouteChildren {
  HubRootUsersRoute: typeof HubRootUsersRoute
  HubRootIndexRoute: typeof HubRootIndexRoute
  HubRootUsersPidRoute: typeof HubRootUsersPidRoute
}

const HubRootRouteChildren: HubRootRouteChildren = {
  HubRootUsersRoute: HubRootUsersRoute,
  HubRootIndexRoute: HubRootIndexRoute,
  HubRootUsersPidRoute: HubRootUsersPidRoute,
}

const HubRootRouteWithChildren =
  HubRootRoute._addFileChildren(HubRootRouteChildren)

interface HubRouteChildren {
  HubRootRoute: typeof HubRootRouteWithChildren
}

const HubRouteChildren: HubRouteChildren = {
  HubRootRoute: HubRootRouteWithChildren,
}

const HubRouteWithChildren = HubRoute._addFileChildren(HubRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/me': typeof MeRoute
  '/hub': typeof HubRootRouteWithChildren
  '/hub/users': typeof HubRootUsersRoute
  '/hub/': typeof HubRootIndexRoute
  '/hub/users/$pid': typeof HubRootUsersPidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/me': typeof MeRoute
  '/hub': typeof HubRootIndexRoute
  '/hub/users': typeof HubRootUsersRoute
  '/hub/users/$pid': typeof HubRootUsersPidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/me': typeof MeRoute
  '/hub': typeof HubRouteWithChildren
  '/hub/_root': typeof HubRootRouteWithChildren
  '/hub/_root/users': typeof HubRootUsersRoute
  '/hub/_root/': typeof HubRootIndexRoute
  '/hub/_root/users/$pid': typeof HubRootUsersPidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/me'
    | '/hub'
    | '/hub/users'
    | '/hub/'
    | '/hub/users/$pid'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/me' | '/hub' | '/hub/users' | '/hub/users/$pid'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/me'
    | '/hub'
    | '/hub/_root'
    | '/hub/_root/users'
    | '/hub/_root/'
    | '/hub/_root/users/$pid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  MeRoute: typeof MeRoute
  HubRoute: typeof HubRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  MeRoute: MeRoute,
  HubRoute: HubRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/me",
        "/hub"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/me": {
      "filePath": "me.tsx"
    },
    "/hub": {
      "filePath": "/",
      "children": [
        "/hub/_root"
      ]
    },
    "/hub/_root": {
      "filePath": "hub._root.tsx",
      "parent": "/hub",
      "children": [
        "/hub/_root/users",
        "/hub/_root/",
        "/hub/_root/users/$pid"
      ]
    },
    "/hub/_root/users": {
      "filePath": "hub._root.users.tsx",
      "parent": "/hub/_root"
    },
    "/hub/_root/": {
      "filePath": "hub._root.index.tsx",
      "parent": "/hub/_root"
    },
    "/hub/_root/users/$pid": {
      "filePath": "hub._root.users_.$pid.tsx",
      "parent": "/hub/_root"
    }
  }
}
ROUTE_MANIFEST_END */
